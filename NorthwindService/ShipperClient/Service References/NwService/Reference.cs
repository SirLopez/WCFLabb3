//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShipperClient.NwService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Shipper", Namespace="http://schemas.datacontract.org/2004/07/NorthwindService")]
    [System.SerializableAttribute()]
    public partial class Shipper : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ShipperIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ShipperID {
            get {
                return this.ShipperIDField;
            }
            set {
                if ((this.ShipperIDField.Equals(value) != true)) {
                    this.ShipperIDField = value;
                    this.RaisePropertyChanged("ShipperID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="EC.WCFLABB3", ConfigurationName="NwService.IShipperService")]
    public interface IShipperService {
        
        [System.ServiceModel.OperationContractAttribute(Action="EC.WCFLABB3/IShipperService/GetShipperByID", ReplyAction="EC.WCFLABB3/IShipperService/GetShipperByIDResponse")]
        ShipperClient.NwService.Shipper GetShipperByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="EC.WCFLABB3/IShipperService/GetShipperByID", ReplyAction="EC.WCFLABB3/IShipperService/GetShipperByIDResponse")]
        System.Threading.Tasks.Task<ShipperClient.NwService.Shipper> GetShipperByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="EC.WCFLABB3/IShipperService/SaveShipper", ReplyAction="EC.WCFLABB3/IShipperService/SaveShipperResponse")]
        void SaveShipper(int id, string companyName, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="EC.WCFLABB3/IShipperService/SaveShipper", ReplyAction="EC.WCFLABB3/IShipperService/SaveShipperResponse")]
        System.Threading.Tasks.Task SaveShipperAsync(int id, string companyName, string phone);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IShipperServiceChannel : ShipperClient.NwService.IShipperService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShipperServiceClient : System.ServiceModel.ClientBase<ShipperClient.NwService.IShipperService>, ShipperClient.NwService.IShipperService {
        
        public ShipperServiceClient() {
        }
        
        public ShipperServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ShipperServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ShipperServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ShipperServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ShipperClient.NwService.Shipper GetShipperByID(int id) {
            return base.Channel.GetShipperByID(id);
        }
        
        public System.Threading.Tasks.Task<ShipperClient.NwService.Shipper> GetShipperByIDAsync(int id) {
            return base.Channel.GetShipperByIDAsync(id);
        }
        
        public void SaveShipper(int id, string companyName, string phone) {
            base.Channel.SaveShipper(id, companyName, phone);
        }
        
        public System.Threading.Tasks.Task SaveShipperAsync(int id, string companyName, string phone) {
            return base.Channel.SaveShipperAsync(id, companyName, phone);
        }
    }
}
